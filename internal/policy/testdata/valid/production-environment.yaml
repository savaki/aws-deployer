AWSTemplateFormatVersion: '2010-09-09'
Description: Production environment template with proper naming - should pass policy

Resources:
  ApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: api-handler
      Runtime: nodejs18.x
      Handler: app.handler
      Code:
        ZipFile: >-
          exports.handler = async (event) => { 
            return { 
              statusCode: 200, 
              body: JSON.stringify({message: 'API response'}) 
            }; 
          };
      Role: !GetAtt ApiRole.Arn
      Environment:
        Variables:
          PRODUCTS_TABLE: !Ref ProductsTable
          ORDERS_TABLE: !Ref OrdersTable

  ApiFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref ApiFunction
      AuthType: AWS_IAM
      Cors:
        AllowCredentials: true
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowOrigins:
          - https://myapp.com

  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dev-myapp--products
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: productId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 2

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dev-myapp--orders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: customerId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CustomerIndex
          KeySchema:
            - AttributeName: customerId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: api-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoDBFullAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource:
              - !GetAtt ProductsTable.Arn
              - !Sub '${ProductsTable}/index/*'
              - !GetAtt OrdersTable.Arn
              - !Sub '${OrdersTable}/index/*'
      Roles:
        - !Ref ApiRole

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/api-handler
      RetentionInDays: 90