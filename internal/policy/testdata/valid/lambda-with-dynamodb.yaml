AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function with properly named DynamoDB table - should pass policy

Resources:
  MyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: user-management-function
      Runtime: python3.9
      Handler: lambda_handler.handler
      Code:
        ZipFile: >-
          def handler(event, context): 
            return {'statusCode': 200, 'body': 'success'}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UserTable

  MyFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref MyFunction
      AuthType: AWS_IAM

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dev-myapp--users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dev-myapp--sessions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoDBAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource:
              - !GetAtt UserTable.Arn
              - !GetAtt SessionTable.Arn
      Roles:
        - !Ref LambdaRole

  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/user-management-function
      RetentionInDays: 30